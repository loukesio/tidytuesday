plot_pokemon_ternary <- function(data, axis1, axis2, axis3,
                                 label_extremes = TRUE, size_by = NULL, point_alpha = 0.8) {
  library(ggtern)
  library(dplyr)
  library(ggplot2)
  library(rlang)
  
  # Capture column names safely
  axis1_q <- enquo(axis1)
  axis2_q <- enquo(axis2)
  axis3_q <- enquo(axis3)
  
  axis1_str <- as_label(axis1_q)
  axis2_str <- as_label(axis2_q)
  axis3_str <- as_label(axis3_q)
  
  # Create a vector of colors mapped to the correct axis names
  region_colors <- setNames(
    c("#FF9999", "#99FF99", "#9999FF", "#CCCCCC"),
    c(axis1_str, axis2_str, axis3_str, "balanced")
  )
  
  # Normalize Pokémon data
  df <- data %>%
    filter(if_all(c(!!axis1_q, !!axis2_q, !!axis3_q, type_1), ~ !is.na(.))) %>%
    mutate(
      total = !!axis1_q + !!axis2_q + !!axis3_q,
      x = (!!axis1_q) / total,
      y = (!!axis2_q) / total,
      z = (!!axis3_q) / total,
      dominant_stat = case_when(
        x > y & x > z ~ axis1_str,
        y > x & y > z ~ axis2_str,
        z > x & z > y ~ axis3_str,
        TRUE ~ "balanced"
      )
    )
  
  # Define geometry points for the 3 trapezoids
  A <- c(1, 0, 0)
  B <- c(0, 1, 0)
  C <- c(0, 0, 1)
  AB_mid <- c(0.5, 0.5, 0)
  BC_mid <- c(0, 0.5, 0.5)
  AC_mid <- c(0.5, 0, 0.5)
  center <- c(1/3, 1/3, 1/3)
  
  region1 <- as.data.frame(rbind(A, AB_mid, center, AC_mid))
  colnames(region1) <- c("x", "y", "z")
  
  region2 <- as.data.frame(rbind(B, BC_mid, center, AB_mid))
  colnames(region2) <- c("x", "y", "z")
  
  region3 <- as.data.frame(rbind(C, AC_mid, center, BC_mid))
  colnames(region3) <- c("x", "y", "z")
  
  # Plot
  p <- ggtern(df, aes(x = x, y = y, z = z)) +
    geom_polygon(data = region1, aes(x = x, y = y, z = z),
                 fill = region_colors[[axis1_str]], alpha = 0.25, inherit.aes = FALSE) +
    geom_polygon(data = region2, aes(x = x, y = y, z = z),
                 fill = region_colors[[axis2_str]], alpha = 0.25, inherit.aes = FALSE) +
    geom_polygon(data = region3, aes(x = x, y = y, z = z),
                 fill = region_colors[[axis3_str]], alpha = 0.25, inherit.aes = FALSE) +
    geom_point(aes(color = dominant_stat), size = 3, alpha = point_alpha) +
    scale_color_manual(values = region_colors, name = "Dominant Stat") +
    theme_bw() +
    labs(
      title = "Pokémon Ternary Plot",
      subtitle = paste(axis1_str, "vs", axis2_str, "vs", axis3_str),
      T = axis1_str,
      L = axis2_str,
      R = axis3_str
    ) +
    theme(
      plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
      plot.subtitle = element_text(hjust = 0.5),
      legend.position = "bottom"
    )
  
  # Optional size mapping
  if (!is.null(size_by) && is.character(size_by)) {
    p <- p + aes_string(size = size_by) +
      guides(size = "none")
  }
  
  # Label extremes
  if (label_extremes) {
    extreme1 <- df[which.max(df[[axis1_str]]), ]
    extreme2 <- df[which.max(df[[axis2_str]]), ]
    extreme3 <- df[which.max(df[[axis3_str]]), ]
    extremes <- bind_rows(extreme1, extreme2, extreme3) %>%
      distinct(pokemon, .keep_all = TRUE)
    
    p <- p + geom_text(data = extremes, aes(label = pokemon),
                       color = "black", size = 3, vjust = -1)
  }
  
  return(p)
}



plot_pokemon_ternary(pokemon_df, hp, attack, defense, size_by = "total")
