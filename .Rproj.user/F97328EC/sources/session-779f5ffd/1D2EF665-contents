plot_pokemon_ternary <- function(data, axis1, axis2, axis3, label_extremes = TRUE, size_by = NULL, point_alpha = 0.8) {
  # Filter and normalize
  df <- data %>%
    filter(if_all(c({{axis1}}, {{axis2}}, {{axis3}}, type_1), ~ !is.na(.))) %>%
    mutate(
      total = {{axis1}} + {{axis2}} + {{axis3}},
      x = {{axis1}} / total,
      y = {{axis2}} / total,
      z = {{axis3}} / total,
      # Determine dominant stat region
      dominant_stat = case_when(
        x > y & x > z ~ deparse(substitute(axis1)),
        y > x & y > z ~ deparse(substitute(axis2)),
        z > x & z > y ~ deparse(substitute(axis3)),
        TRUE ~ "balanced"  # For exact ties (rare)
      )
    )
  
  # Set colors for the three regions
  region_colors <- c(
    "#FF9999",  # Light red for HP
    "#99FF99",  # Light green for Attack
    "#9999FF"   # Light blue for Defense
  )
  names(region_colors) <- c(
    deparse(substitute(axis1)),
    deparse(substitute(axis2)),
    deparse(substitute(axis3))
  )
  
  # Start plot with custom theme
  p <- ggtern(df, aes(x = x, y = y, z = z)) +
    theme_bw() +
    theme_showarrows() +
    labs(
      title = "PokÃ©mon Ternary Plot",
      subtitle = paste(deparse(substitute(axis1)), "vs",
                       deparse(substitute(axis2)), "vs",
                       deparse(substitute(axis3))),
      T = deparse(substitute(axis1)),
      L = deparse(substitute(axis2)),
      R = deparse(substitute(axis3))
    ) +
    theme(
      plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
      plot.subtitle = element_text(hjust = 0.5), 
      legend.position = "bottom",
      panel.background = element_rect(fill = "white", color = NA),
      panel.grid.major = element_line(color = "lightgray", size = 0.5),
      panel.grid.minor = element_blank(),
      tern.axis.arrow = element_line(color = "black", size = 1),
      tern.panel.background = element_rect(fill = "white", color = NA),
      tern.panel.grid.major = element_line(color = "lightgray", size = 0.5),
      tern.panel.grid.minor = element_blank(),
      tern.axis.line = element_line(color = "black", size = 1),
      tern.axis.text = element_text(color = "black"),
      tern.axis.title = element_text(color = "black", face = "bold")
    )
  
  # Add background regions using ggtern's specific functions
  # For HP-dominant region (top)
  hp_region <- data.frame(
    x = c(1/3, 1, 0),
    y = c(1/3, 0, 0),
    z = c(1/3, 0, 1)
  )
  
  # For Attack-dominant region (bottom-left)
  atk_region <- data.frame(
    x = c(1/3, 0, 0),
    y = c(1/3, 1, 0),
    z = c(1/3, 0, 1)
  )
  
  # For Defense-dominant region (bottom-right)
  def_region <- data.frame(
    x = c(1/3, 0, 1),
    y = c(1/3, 0, 0),
    z = c(1/3, 1, 0)
  )
  
  # Add the regions to the plot
  p <- p +
    geom_polygon(data = hp_region, mapping = aes(x = x, y = y, z = z), 
                 fill = region_colors[1], alpha = 0.2, inherit.aes = FALSE) +
    geom_polygon(data = atk_region, mapping = aes(x = x, y = y, z = z), 
                 fill = region_colors[2], alpha = 0.2, inherit.aes = FALSE) +
    geom_polygon(data = def_region, mapping = aes(x = x, y = y, z = z), 
                 fill = region_colors[3], alpha = 0.2, inherit.aes = FALSE)
  
  # Add points colored by their dominant stat
  p <- p + geom_point(aes(color = dominant_stat), size = 3, alpha = point_alpha) +
    scale_color_manual(values = c(
      region_colors,
      "balanced" = "#AAAAAA"  # Gray for balanced stats
    ), name = "Dominant Stat")
  
  # Add size mapping if provided
  if (!is.null(size_by) && is.character(size_by)) {
    p <- p + aes_string(size = size_by) +
      guides(size = "none")  # Remove size legend
  }
  
  # Add extreme labels if requested
  if (label_extremes) {
    extreme_hp <- df[which.max(pull(df, {{axis1}})), ]
    extreme_atk <- df[which.max(pull(df, {{axis2}})), ]
    extreme_def <- df[which.max(pull(df, {{axis3}})), ]
    extremes <- bind_rows(extreme_hp, extreme_atk, extreme_def) %>%
      distinct(pokemon, .keep_all = TRUE)
    p <- p +
      geom_text(data = extremes, aes(label = pokemon), color = "black", size = 3, vjust = -1)
  }
  
  return(p)
}

plot_pokemon_ternary(pokemon_df, hp, attack, defense, size_by = "total")
