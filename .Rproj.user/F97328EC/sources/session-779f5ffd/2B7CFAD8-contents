plot_pokemon_ternary <- function(data, axis1, axis2, axis3, label_extremes = TRUE, size_by = NULL, point_alpha = 0.8) {
  # Filter and normalize
  df <- data %>%
    filter(if_all(c({{axis1}}, {{axis2}}, {{axis3}}, type_1), ~ !is.na(.))) %>%
    mutate(
      total = {{axis1}} + {{axis2}} + {{axis3}},
      x = {{axis1}} / total,
      y = {{axis2}} / total,
      z = {{axis3}} / total
    )
  
  # Start plot
  p <- ggtern(df, aes(x = x, y = y, z = z, color = type_1)) +
    theme_bw() +
    theme_showarrows() +
    labs(
      title = "PokÃ©mon Ternary Plot",
      subtitle = paste(deparse(substitute(axis1)), "vs",
                       deparse(substitute(axis2)), "vs",
                       deparse(substitute(axis3))),
      T = deparse(substitute(axis1)),
      L = deparse(substitute(axis2)),
      R = deparse(substitute(axis3))
    ) +
    theme_hidegrid_minor() +
    theme(
      plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
      plot.subtitle = element_text(hjust = 0.5), 
      legend.position = "bottom",
      # Custom ternary plot styling
      panel.background = element_rect(fill = "white", color = NA),
      panel.grid.major = element_line(color = "lightgray", size = 0.2),
      #panel.grid.minor = element_line(color = "lightgray", size = 0.2),
      tern.axis.arrow = element_line(color = "black", size = 0.5),
      tern.panel.background = element_rect(fill = "white", color = NA),
      tern.panel.grid.major = element_blank(),
      tern.panel.grid.minor = element_blank(),
      #tern.axis.line = element_line(color = "black", size = 0.5),
      #tern.axis.text = element_text(color = "black"),
      tern.axis.title = element_text(color = "black", face = "bold")
    )
  
  # Add geom_point with size mapping if provided
  if (!is.null(size_by)) {
    # For a string column name
    if (is.character(size_by)) {
      p <- p + 
        geom_point(aes_string(size = size_by), alpha = point_alpha) +
        guides(size = "none") # Remove size legend
    } else {
      # Just use a fixed size if it's not a string and not NULL
      p <- p + geom_point(size = 3, alpha = point_alpha)
    }
  } else {
    p <- p + geom_point(size = 3, alpha = point_alpha)
  }
  
  # Add extreme labels if requested
  if (label_extremes) {
    extreme_hp <- df[which.max(pull(df, {{axis1}})), ]
    extreme_atk <- df[which.max(pull(df, {{axis2}})), ]
    extreme_def <- df[which.max(pull(df, {{axis3}})), ]
    extremes <- bind_rows(extreme_hp, extreme_atk, extreme_def) %>%
      distinct(pokemon, .keep_all = TRUE)
    p <- p +
      geom_text(data = extremes, aes(label = pokemon), color = "white", size = 3, vjust = -1)
  }
  
  return(p)
}

plot_pokemon_ternary(pokemon_df, hp, attack, defense, size_by = "total", point_alpha = 0.6)
